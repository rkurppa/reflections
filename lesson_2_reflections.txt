What happens when you initialize a repository? Why do you need to do it?

	Git starts following the repository, enabling you to track changes and
	make commits on it.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area enables you to make changes to the files you want included
	in the repository. It also enables you to see what has changed before you
	commit.

How can you use the staging area to make sure you have one commit per logical
change?

	Staging area enables me to choose which files to add in each commit, despite
	how many files I have edited, thus allowing me to only include logically
	connected files in each commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	If I want to
		- Try out new features
		- Split a master version to smaller offshoots
		- Want to make large changes to the program flow.
	Branches would help by enabling me to keep the main program distinct, while
	allowing me the freedom to try out new things.

How do the diagrams help you visualize the branch structure?

	The diagrams show nicely how the branches are created, where they are
	separated from the master and how they are related.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging is a way of combining two separate branches. It is represented in
	the diagram as the connection between two paths - which is basically what
	merging is. It also helps to visualize how different commit paths have
	evolved, and shows how they come together again.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Automatic merging is easier and it saves the effort from a programmer, but
	it is also somewhat riskier - when doing merges manually you usually can
	and should understand the code better, automatic merging may introduce
	errors, especially when several people are editing the same file.